import random

from django.shortcuts import render
from django.http import HttpResponseRedirect
from django.urls import reverse_lazy

from berylsite.models import bootmodel,clothmodel,cakemodel,pillowmodel,framemodel,mugmodel
from .models import payment
from .forms import orders
from berylsite.models import userDetail
#trailer to sort surprise items
counts = ['one','two','three','four','five','six','seven','seven','eight','nine','ten','elelven','twelve']

def assignTransferID(name):
    mylist=[]
    for i in payment.objects.all():
        if i.name == name:
            mylist.append(i)
        else: 
            continue
    x = len(mylist) - 1
    neededRow = mylist[x]
    first = neededRow.name[0::2]
    second = neededRow.event
    third = neededRow.id
    fourth = random.randint(0,50)
    tx_ref = '{}{}{}{}'.format(first,second,third,fourth)
    neededRow.txref = tx_ref
    neededRow.save()
    return {
        'tx_ref':tx_ref,
        'email':neededRow.email,
        'amount':neededRow.amount,
        'tel':neededRow.tel,
        'event':neededRow.event,
    }

#############################################################################################################
############################ THIS IS THE VIEW THAT HANDLES THE PAYMENT INTEGRATION ##########################
#############################################################################################################
def paymentview(request):
    #we define the context with some predefined content. 
    #context[*item*] is the array of the selected *item* items as sent by the session cookie 
    #context[*item*_total_price'] will contain the sum of price of *items* selected  
    context = { 
        'boot':[],
        'cloth':[],
        'cake':[],
        'frame':[],
        'pillow':[],
        'mug':[],
        'boot_total_price':int(),
        'cloth_total_price':int(),
        'cake_total_price':int(),
        'frame_total_price':int(),
        'pillow_total_price':int(),
        'mug_total_price':int(),
        'total_price':int(),
        'itemdetail':'',
    }
    #this is for the template name
    template = ''

    #this is to handle the error message generated by the 'try-except' error handler
    #it is practically of no use, its function is to store error messages which will no be used by the program
    message = ''
    ########### HERE IS TO CHECK AND CLARIFY ON WHAT TO DISPLAY AND WHAT TEMPLATE WILL BE USED ###########
    if(request.method == 'POST'):
        #If HTTP request method is 'POST', this program will be used. this means that the user clicked continue
        #on the page,thereby agreeing to pay
        form = orders(request.POST)
        if(form.is_valid()):#if form is valid
            form.save()#save it
            return HttpResponseRedirect('?submitted=true') 
            #return 'payment/?submitted=true' which means that the user filled every important form
    else:
        #If HTTP request method is 'GET', this program will be used. this means that 'the user is just
        #navigating to the page' or 'the user has submitted every important form'
        form = orders()
        context['thisUser'] = userDetail.objects.get(Username=request.user.username)
        #if just navigating to the page, template = paymentTemplate/VerifyContent.html'
        template = 'paymentTemplate/VerifyContent.html'
        #if submitted every important form, template = paymentTemplate/MakePayment.html'
        if('submitted' in request.GET):
            details = assignTransferID(request.user.username)
            context['tx_ref'] = details['tx_ref']
            context['customerEmail'] = details['email'] 
            context['packageAmount'] = details['amount'] 
            context['customerTel'] = details['tel'] 
            context['eventType'] = details['event']
            template = 'paymentTemplate/MakePayment.html'

    context['form'] = form

    ########### HERE IS TO SORT ITEMS AS SENT BY SESSION COOKIE USING 'count' TRAILER ###########
    for i in counts:#loop through trailer
        try:
            Ocookies = request.COOKIES[i].split('-')
            if(Ocookies[0] == 'boot'):
                context['boot'].append(bootmodel.objects.get(code=request.COOKIES[i]))
                context['bootlength'] = len(context['boot'])
                context['boot_total_price'] += bootmodel.objects.get(code=request.COOKIES[i]).amount
                context['total_price'] += bootmodel.objects.get(code=request.COOKIES[i]).amount
                context['itemdetail'] += request.COOKIES[i]+', '
            elif(Ocookies[0] == 'cloth'):
                context['cloth'].append(clothmodel.objects.get(code=request.COOKIES[i]))
                context['clothlength'] = len(context['cloth'])
                context['cloth_total_price'] += clothmodel.objects.get(code=request.COOKIES[i]).amount
                context['total_price'] += clothmodel.objects.get(code=request.COOKIES[i]).amount
                context['itemdetail'] += request.COOKIES[i]+', '
            elif(Ocookies[0] == 'cake'):
                context['cake'].append(cakemodel.objects.get(code=request.COOKIES[i]))
                context['cakelength'] = len(context['cloth'])
                context['cake_total_price'] += cakemodel.objects.get(code=request.COOKIES[i]).amount
                context['total_price'] += cakemodel.objects.get(code=request.COOKIES[i]).amount
                context['itemdetail'] += request.COOKIES[i]+', '
            elif(Ocookies[0] == 'frame'):
                context['frame'].append(framemodel.objects.get(code=request.COOKIES[i]))
                context['framelength'] = len(context['frame'])
                context['frame_total_price'] += framemodel.objects.get(code=request.COOKIES[i]).amount
                context['total_price'] += framemodel.objects.get(code=request.COOKIES[i]).amount
                context['itemdetail'] += request.COOKIES[i]+', '
            elif(Ocookies[0] == 'pillow'):
                context['pillow'].append(pillowmodel.objects.get(code=request.COOKIES[i]))
                context['pillowlength'] = len(context['pillow'])
                context['pillow_total_price'] += pillowmodel.objects.get(code=request.COOKIES[i]).amount
                context['total_price'] += pillowmodel.objects.get(code=request.COOKIES[i]).amount
                context['itemdetail'] += request.COOKIES[i]+', '
            elif(Ocookies[0] == 'mug'):
                context['mug'].append(mugmodel.objects.get(code=request.COOKIES[i]))
                context['muglength'] = len(context['mug'])
                context['mug_total_price'] += mugmodel.objects.get(code=request.COOKIES[i]).amount
                context['total_price'] += mugmodel.objects.get(code=request.COOKIES[i]).amount
                context['itemdetail'] += request.COOKIES[i]+', '
        except Exception as err:
            message += "" #store error message in the 'message' variable   
    return render(request,template,context=context)
# Create your views here.
